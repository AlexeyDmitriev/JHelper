package name.admitriev.jhelper.actions;

import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiFile;
import name.admitriev.jhelper.JhelperException;
import name.admitriev.jhelper.components.Configurator;
import net.egork.chelper.util.OutputWriter;

import java.io.IOException;


public class GenerateCodeAction extends AnAction {
	@Override
	public void actionPerformed(AnActionEvent e) {
		PsiFile file = e.getData(CommonDataKeys.PSI_FILE);

		if(file == null) {
			System.err.println("file is null");
			return;
		}

		if(!isCppFile(file)) {
			System.err.println("Not a cpp file");
			return;
		}

		Project project = e.getProject();
		if(project == null) {
			throw new JhelperException("no project found");
		}

		VirtualFile outputFile = findFileInProject(project, "output/main.cpp");
		if(outputFile == null) {
			throw new JhelperException("no output file found.");
		}

		try {
			byte[] bytes = file.getVirtualFile().contentsToByteArray();
			writeToFile(project, outputFile, bytes);
		} catch (IOException e1) {
			throw new JhelperException("Can't read input file", e1);
		}
	}


	private void writeToFile(final Project project, final VirtualFile outputFile, final byte[] bytes) {
		ApplicationManager.getApplication().runWriteAction(new Runnable() {
			@Override
			public void run() {
				try {
					OutputWriter writer = new OutputWriter(outputFile.getOutputStream(this));
					writer.print(authorComment(project));
					writer.print(new String(bytes, "UTF-8"));
					writer.flush();
					writer.close();
				} catch (IOException e) {
					throw new JhelperException("Can't write to output file", e);
				}
			}
		});
	}

	private String authorComment(Project project) {

		Configurator configurator = project.getComponent(Configurator.class);
		Configurator.State configuration = configurator.getState();

		StringBuilder sb = new StringBuilder();
		sb.append("/**\n");
		sb.append(" * code generated by JHelper\n");
		sb.append(" * @author ").append(configuration.getAuthor()).append('\n');
		sb.append(" */\n\n");
		return sb.toString();
	}

	private static VirtualFile findFileInProject(Project project, String path) {
		VirtualFile projectDirectory = project.getBaseDir();
		return projectDirectory.findFileByRelativePath(path);
	}

	private static boolean isCppFile(PsiFile file) {
		return file.getName().endsWith(".cpp");
	}

}
